Node模块机制
请介绍一下node里的模块是什么

Node中，每个文件模块都是一个对象，它的定义如下：

    function Module(id, parent) {
      this.id = id;
      this.exports = {};
      this.parent = parent;
      this.filename = null;
      this.loaded = false;
      this.children = [];
    }

    module.exports = Module;

    var module = new Module(filename, parent);

 所有的模块都是 Module 的实例。可以看到，当前模块（module.js）也是 Module 的一个实例。


请介绍一下require的模块加载机制

<!-- 1、先计算模块路径
2、如果模块在缓存里面，取出缓存
3、加载模块
4、输出模块的exports属性即可 -->

  1、先计算模块的绝对路径
  2、查看模块是不是有缓存，有的话取出缓存；
  3、没有缓存的话，查看是不是内置模块；
  4、生成模块实例，加入缓存；
  5、加载模块；
  6、输出模块的exports属性；

    // require 其实内部调用 Module._load 方法
    Module._load = function(request, parent, isMain) {
      //  计算绝对路径
      var filename = Module._resolveFilename(request, parent);

      //  第一步：如果有缓存，取出缓存
      var cachedModule = Module._cache[filename];
      if (cachedModule) {
        return cachedModule.exports;
      }
      // 第二步：是否为内置模块
      if (NativeModule.exists(filename)) {
        return NativeModule.require(filename);
      }
      /********************************这里注意了**************************/
      // 第三步：生成模块实例，存入缓存
      // 这里的Module就是我们上面的1.1定义的Module
      var module = new Module(filename, parent);
      Module._cache[filename] = module;
      /********************************这里注意了**************************/
      // 第四步：加载模块
      // 下面的module.load实际上是Module原型上有一个方法叫Module.prototype.load
      try {
        module.load(filename);
        hadException = false;
      } finally {
        if (hadException) {
          delete Module._cache[filename];
        }
      }
      // 第五步：输出模块的exports属性
      return module.exports;
    };
加载模块时，为什么每个模块都有__dirname,__filename属性呢，new Module的时候我们看到1.1部分没有这两个属性的，那么这两个属性是从哪里来的
    
    // 上面(1.2部分)的第四步module.load(filename)
    // 这一步，module模块相当于被包装了，包装形式如下
    // 加载js模块，相当于下面的代码（加载node模块和json模块逻辑不一样）
    (function (exports, require, module, __filename, __dirname) {
      // 模块源码
      // 假如模块代码如下
      var math = require('math');
      exports.area = function(radius){
          return Math.PI * radius * radius
      }
    });
    
也就是说，每个module里面都会传入__filename, __dirname参数，这两个参数并不是module本身就有的，是外界传入的


我们知道node导出模块有两种方式，一种是exports.xxx=xxx和Module.exports={}有什么区别吗

exports其实就是module.exports

其实1.3问题的代码已经说明问题了，接着我引用廖雪峰大神的讲解，希望能讲的更清楚

module.exports vs exports
很多时候，你会看到，在Node环境中，有两种方法可以在一个模块中输出变量：

方法一：对module.exports赋值：

    // hello.js

    function hello() {
        console.log('Hello, world!');
    }

    function greet(name) {
        console.log('Hello, ' + name + '!');
    }
    module.exports = {
        hello: hello,
        greet: greet
    };
方法二：直接使用exports：
    // hello.js
    function hello() {
        console.log('Hello, world!');
    }
    function greet(name) {
        console.log('Hello, ' + name + '!');
    }
    function hello() {
        console.log('Hello, world!');
    }
    exports.hello = hello;
    exports.greet = greet;

但是你不可以直接对exports赋值：
    
    // 代码可以执行，但是模块并没有输出任何变量:
    exports = {
        hello: hello,
        greet: greet
    };

如果你对上面的写法感到十分困惑，不要着急，我们来分析Node的加载机制：
首先，Node会把整个待加载的hello.js文件放入一个包装函数load中执行。在执行这个load()函数前，Node准备好了module变量：

    var module = {
        id: 'hello',
        exports: {}
    };
load()函数最终返回module.exports：
    var load = function (exports, module) {
        // hello.js的文件内容
        ...
        // load函数返回:
        return module.exports;
    };

    var exported = load(module.exports, module);

也就是说，默认情况下，Node准备的exports变量和module.exports变量实际上是同一个变量，并且初始化为空对象{}，于是，我们可以写：

    exports.foo = function () { return 'foo'; };
    exports.bar = function () { return 'bar'; };
也可以写：

    module.exports.foo = function () { return 'foo'; };
    module.exports.bar = function () { return 'bar'; };

换句话说，Node默认给你准备了一个空对象{}，这样你可以直接往里面加东西。

但是，如果我们要输出的是一个函数或数组，那么，只能给module.exports赋值：

    module.exports = function () { return 'foo'; };
给exports赋值是无效的，因为赋值后，module.exports仍然是空对象{}。

结论
### 如果要输出一个键值对象{}，可以利用exports这个已存在的空对象{}，并继续在上面添加新的键值；

### 如果要输出一个函数或数组，必须直接对module.exports对象赋值。

### 所以我们可以得出结论：直接对module.exports赋值，可以应对任何情况：

    module.exports = {
        foo: function () { return 'foo'; }
    };
    或者：

    module.exports = function () { return 'foo'; };

最终，我们强烈建议使用module.exports = xxx的方式来输出模块变量，这样，你只需要记忆一种方法。

### node的异步I/O

本章的答题思路大多借鉴于朴灵大神的《深入浅出的NodeJS》

请介绍一下Node事件循环的流程

在进程启动时，Node便会创建一个类似于while(true)的循环，每执行一次循环体的过程我们成为Tick。

每个Tick的过程就是查看是否有事件待处理。如果有就取出事件及其相关的回调函数。然后进入下一个循环，如果不再有事件处理，就退出进程。

![Tick流程图](./tick.png)


#### 在每个tick的过程中，如何判断是否有事件需要处理呢？

每个事件循环中有一个或者多个观察者，而判断是否有事件需要处理的过程就是向这些观察者询问是否有要处理的事件。

在Node中，事件主要来源于网络请求、文件的I/O等，这些事件对应的观察者有文件I/O观察者，网络I/O的观察者。

事件循环是一个典型的生产者/消费者模型。异步I/O，网络请求等则是事件的生产者，源源不断为Node提供不同类型的事件，这些事件被传递到对应的观察者那里，事件循环则从观察者那里取出事件并处理。

在windows下，这个循环基于IOCP创建，在*nix下则基于多线程创建
![整个异步I/O流程](./all_io.jpg)




### 哪些情况会造成V8无法立即回收内存

闭包和全局变量

### 请谈一下内存泄漏是什么，以及常见内存泄漏的原因，和排查的方法

什么是内存泄漏

内存泄漏(Memory Leak)指由于疏忽或错误造成程序未能释放已经不再使用的内存的情况。

如果内存泄漏的位置比较关键，那么随着处理的进行可能持有越来越多的无用内存，这些无用的内存变多会引起服务器响应速度变慢。

严重的情况下导致内存达到某个极限(可能是进程的上限，如 v8 的上限;也可能是系统可提供的内存上限)会使得应用程序崩溃。常见内存泄漏的原因 内存泄漏的几种情况:

#### 一、全局变量

a = 10;
//未声明对象。
global.b = 11;
//全局变量引用
这种比较简单的原因，全局变量直接挂在 root 对象上，不会被清除掉。

二、闭包

function out() {
    const bigData = new Buffer(100);
    inner = function () {
        
    }
}
闭包会引用到父级函数中的变量，如果闭包未释放，就会导致内存泄漏。上面例子是 inner 直接挂在了 root 上，那么每次执行 out 函数所产生的 bigData 都不会释放，从而导致内存泄漏。

需要注意的是，这里举得例子只是简单的将引用挂在全局对象上，实际的业务情况可能是挂在某个可以从 root 追溯到的对象上导致的。

三、事件监听

Node.js 的事件监听也可能出现的内存泄漏。例如对同一个事件重复监听，忘记移除(removeListener)，将造成内存泄漏。这种情况很容易在复用对象上添加事件时出现，所以事件重复监听可能收到如下警告：

  emitter.setMaxListeners() to increase limit

例如，Node.js 中 Agent 的 keepAlive 为 true 时，可能造成的内存泄漏。当 Agent keepAlive 为 true 的时候，将会复用之前使用过的 socket，如果在 socket 上添加事件监听，忘记清除的话，因为 socket 的复用，将导致事件重复监听从而产生内存泄漏。

原理上与前一个添加事件监听的时候忘了清除是一样的。在使用 Node.js 的 http 模块时，不通过 keepAlive 复用是没有问题的，复用了以后就会可能产生内存泄漏。所以，你需要了解添加事件监听的对象的生命周期，并注意自行移除。

排查方法

想要定位内存泄漏，通常会有两种情况：

对于只要正常使用就可以重现的内存泄漏，这是很简单的情况只要在测试环境模拟就可以排查了。

对于偶然的内存泄漏，一般会与特殊的输入有关系。想稳定重现这种输入是很耗时的过程。如果不能通过代码的日志定位到这个特殊的输入，那么推荐去生产环境打印内存快照了。

需要注意的是，打印内存快照是很耗 CPU 的操作，可能会对线上业务造成影响。快照工具推荐使用 heapdump 用来保存内存快照，使用 devtool 来查看内存快照。

使用 heapdump 保存内存快照时，只会有 Node.js 环境中的对象，不会受到干扰(如果使用 node-inspector 的话，快照中会有前端的变量干扰)。

PS：安装 heapdump 在某些 Node.js 版本上可能出错，建议使用 npm install heapdump -target=Node.js 版本来安装。

