 观察者模式（observer pattern）

观察者模式定义了对象间的一种一对多的依赖关系，当一个对象的状态发生变化时，所有依赖于它的对象都将得到通知，并自动更新。

观察者模式属于行为型模式，行为型模式关注的时对象之间的通信，观察者模式就是观察者和被观察者之间的通讯。

观察者模式有一个别名时发布-订阅模式，或者订阅0发布模式。

发布订阅模式（pub-sub pattern）

在现在发布订阅模式中，称位发布者的消息发送者不会将消息直接发送给订阅者，者意味着发布者和订阅者不知道彼此的存在，在发布者和订阅者之间存在第三方组建，称位消息代理或调度中心或中间件，它维持者发布者和订阅者之间的联系，过滤所有发布者传入的消息并相应地发送它们给订阅者。

举个例子：你在微博中关注了一个博主，同时还有其他很多人也关注了，当博主发布动态的时候，微博就会位你们推送这条动态，这里博主就时发布者，粉丝就时订阅者，微博就是调度中心，你和博主是没有直接的消息往来的，全是通过微博来协调的。

![观察者和发布订阅的区别](./51555846888_.pic.jpg '区别')

观察者模式：观察者observer直接订阅subscribe主题Subject，而当主题被激活时，会触发fire event 观察者的事件。

发布订阅模式：订阅者(Subscriber)把自己想订阅的事件注册(Subscribe)到调度中心(Topic)，当发布者(Publisher)发布该事件(Publish topic)到调度中心,也就是该事件触发时，由调度中心统一调度Fire Event 订阅者注册到调度中心的处理代码。


如下代码：

猎人发布与订阅任务
    
观察者模式：

ObserverPattern.js


发布订阅模式：

PublishSubscribePattern.js



观察者模式和发布订阅模式最大的区别就是发布订阅模式有个事件调度中心。

观察者模式由具体目标调度，每个被订阅的目标里面都需要有对观察者的处理，这种处理方式比较直接粗暴，但是会造成代码的冗余。

而发布订阅模式中统一由调度中心进行处理，订阅者和发布者互不干扰，消除了发布者和订阅者之间的依赖。这样一方面实现了解耦，还有就是可以实现更细粒度的一些控制。比如发布者发布了很多消息，但是不想所有的订阅者都接收到，就可以在调度中心做一些处理，类似于权限控制之类的。还可以做一些节流操作。




### 观察者模式是不是发布订阅模式

网上关于这个问题的回答，出现了两极分化，有认为发布订阅模式就是观察者模式的，也有认为观察者模式和发布订阅模式是真不一样的。

其实我不知道发布订阅模式是不是观察者模式，就像我不知道**辨别模式的关键是设计意图还是设计结构（理念）**，虽然《JavaScript设计模式与开发实践》一书中说了 分辨模式的关键是意图而不是结构。

如果以结构来分辨模式，发布订阅模式相比观察者模式多了一个中间件订阅器，所以发布订阅模式是不同于观察者模式的；
如果以意图来分辨模式，他们都是 **实现了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知，并自动更新**，那么他们就是同一种模式，发布订阅模式是在观察者模式的基础上做的优化升级。

不过，不管他们是不是同一个设计模式，他们的实现方式确实有差别，我们在使用的时候应该根据场景来判断选择哪个。