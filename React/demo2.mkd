react 事件机制

简单的理解 react 如何处理事件的，React 在组件加载(mount)和更新(update)时，将事件通过 addEventListener  统一注册到 document 上，然后会有一个事件池存储了所有的事件，当事件触发的时候，通过 dispatchEvent 进行事件分发。

- react 里面绑定事件的方式和在 HTML 中绑定事件类似，使用驼峰式命名指定要绑定的 onClick 属性为组件定义的一个方法{this.handleClick.bind(this)}。

- 由于类的方法默认不会绑定 this，因此在调用的时候如果忘记绑定，this 的值将会是 undefined。 通常如果不是直接调用，应该为方法绑定 this，将事件函数上下文绑定要组件实例上

绑定事件的四种方式

  class Button extends react.Component {
    constructor(props) {
      super(props)
      this.handleClick1 = this.handleClick1.bind(this)
    }
    //方式1：在构造函数中使用bind绑定this，官方推荐的绑定方式，也是性能最好的方式
    handleClick1() {
      console.log('this is:', this)
    }
    //方式2：在调用的时候使用bind绑定this
    handleClick2() {
      console.log('this is:', this)
    }
    //方式3：在调用的时候使用箭头函数绑定this
    // 方式2和方式3会有性能影响并且当方法作为属性传递给子组件的时候会引起重渲问题
    handleClick3() {
      console.log('this is:', this)
    }
    //方式4：使用属性初始化器语法绑定this，需要babel转义
    handleClick4 = () => {
      console.log('this is:', this)
    }
    render() {
      return (
        <div>
          <button onClick={this.handleClick1}>Click me</button>
          <button onClick={this.handleClick2.bind(this)}>Click me</button>
          <button onClick={() => this.handleClick3}>Click me</button>
          <button onClick={this.handleClick4}>Click me</button>
        </div>
      )
    }
  }

“合成事件”和“原生事件”

react 实现了一个“合成事件”层（synthetic event system），这抹平了各个浏览器的事件兼容性问题。所有事件均注册到了元素的最顶层-document 上，“合成事件”会以**事件委托**（event delegation）的方式绑定到组件最上层，并且在组件卸载（unmount）的时候自动销毁绑定的事件。






react Fiber 架构分析

react-fiber是为了增强动画、布局、移动端手势领域的适用性，最重要的特性是对页面渲染的优化: 允许将渲染方面的工作拆分为多段进行。

### react Fiber 架构解决了什么问题

react-fiber 可以为我们提供如下几个功能：

- 设置渲染任务的优先
- 采用新的 Diff 算法
- 采用虚拟栈设计允许当优先级更高的渲染任务和较低优先的任务之间来回切换

Fiber 如何做到异步渲染 Virtual Dom 和 Diff 算法

众所周知，画面每秒钟更新 60 次，页面在人眼中显得流畅，无明显卡顿。每秒 60 次，即 16ms 要更新一次页面，如果更新页面消耗的时间不到 16ms，那么在下一次更新时机来到之前会剩下一点时间执行其他的任务，只要保证及时在 16ms 的间隔下更新界面就完全不会影响到页面的流畅程度。fiber 的核心正是利用了 60 帧原则，实现了一个基于优先级和 requestIdleCallback 的循环任务调度算法。

  function fiber(剩余时间) {
    if (剩余时间 > 任务所需时间) {
      做任务
    } else {
      requestIdleCallback(fiber)
      // requestIdleCallback 是浏览器提供的一个 api，可以让浏览器在空闲的时候执行回调，
      // 在回调参数中可以获取到当前帧剩余的时间，fiber 利用了这个参数，
      // 判断当前剩下的时间是否足够继续执行任务，
      // 如果足够则继续执行，否则暂停任务，
      // 并调用 requestIdleCallback 通知浏览器空闲的时候继续执行当前的任务
    }
  }

#### react Hook

hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。
个人理解：让传统的函数组件 function component 有内部状态 state 的函数 function,简单来说就是 hooks 让函数组件有了状态，可以完全替代 class。

接下来梳理 Hooks 中最核心的 2 个 api, useState 和 useEffect

#### useState
useState 是一个钩子，他可以为函数式组件增加一些状态，并且提供改变这些状态的函数，同时它接收一个参数，这个参数作为状态的默认值。

  const [count, setCount] = useState(initialState)
  const [count, setCount] = useState(initialState)


  function App() {
    const [count, setCount] = useState(0)
    return (
      <div>
        <p>You clicked {count} times</p>
        <button onClick={() => setCount(count + 1)}>Click me</button>
      </div>
    )
  }
#### useEffect(fn)

在每次 render 后都会执行这个钩子。可以将它当成是 componentDidMount、componentDidUpdate、componentWillUnmount 的合集。因此使用 useEffect 比之前优越的地方在于:
可以避免在 componentDidMount、componentDidUpdate 书写重复的代码;
可以将关联逻辑写进一个 useEffect(在以前得写进不同生命周期里);


### 深入理解 react 原理

#### react 虚拟 dom 原理剖析

##### react 组件的渲染流程


使用 react.createElement 或 JSX 编写 react 组件，实际上所有的 JSX 代码最后都会转换成 react.createElement(...)，Babel 帮助我们完成了这个转换的过程。

createElement 函数对 key 和 ref 等特殊的 props 进行处理，并获取 defaultProps 对默认 props 进行赋值，并且对传入的孩子节点进行处理，最终构造成一个 reactElement 对象（所谓的虚拟 DOM）。

reactDOM.render 将生成好的虚拟 DOM 渲染到指定容器上，其中采用了批处理、事务等机制并且对特定浏览器进行了性能优化，最终转换为真实 DOM。

##### 虚拟 DOM 的组成

即 reactElement 对象，我们的组件最终会被渲染成下面的结构：

  `type`：元素的类型，可以是原生 html 类型（字符串），或者自定义组件（函数或 class）
  `key`：组件的唯一标识，用于 Diff 算法，下面会详细介绍
  `ref`：用于访问原生 dom 节点
  `props`：传入组件的 props，chidren 是 props 中的一个属性，它存储了当前组件的孩子节点，可以是数组（多个孩子节点）或对象（只有一个孩子节点）
  `owner`：当前正在构建的 Component 所属的 Component
  `self`：（非生产环境）指定当前位于哪个组件实例
  `_source`：（非生产环境）指定调试代码来自的文件(fileName)和代码行数(lineNumber)

当组件状态 state 有更改的时候，react 会自动调用组件的 render 方法重新渲染整个组件的 UI。

当然如果大面积的操作 DOM，性能会是一个很大的问题，所以 react 实现了一个 Virtual DOM，组件 DOM 结构就是映射到这个 Virtual DOM上，react 在这个 Virtual DOM 上实现了一个 diff 算法，当要重新渲染组件的时候，会通过 diff 寻找到要变更的 DOM 节点，再把这个修改更新到浏览器实际的 DOM 节点上，所以实际上不是真的渲染整个 DOM 树。这个 Virtual DOM 是一个纯粹的 JS 数据结构，所以性能会比原生 DOM 快很多。

##### react 是如何防止 XSS 的

reactElement 对象还有一个$$typeof属性，它是一个 Symbol 类型的变量Symbol.for('react.element')，当环境不支持 Symbol 时，$$typeof 被赋值为 0xeac7。
这个变量可以防止 XSS。如果你的服务器有一个漏洞，允许用户存储任意 JSON 对象， 而客户端代码需要一个字符串，这可能为你的应用程序带来风险。JSON 中不能存储 Symbol 类型的变量，而 react 渲染时会把没有 $$typeof 标识的组件过滤掉。


#### diff 算法
传统的 diff 算法通过循环递归对节点进行一次对比，效率很低，算法复杂度达到 O(n^3)，其中 n 是树中节点的总数,React 通过制定大胆的策略，将 O(n^3) 复杂度的问题转换成 O(n) 复杂度的问题。

diff 策略:

1. web ui 中 Dom 节点跨层级的移动操作很少,diff 算法比较新旧节点的时候，比较只会在同层级比较，不会跨层级比较
2. 拥有相同类的两个组件将会生成相似的树形结构，拥有不同类的两个组件将会生成不同的树形结构。
3. 对于同一层级的一组子节点，他们可以通过唯一 key 进行区分

基于以上三个前提策略，React 分别对 tree diff、component diff 以及 element diff 进行算法优化，事实也证明这三个前提策略是合理且准确的，它保证了整体界面构建的性能。

简单的讲就是：
具体可以参考React 源码剖析系列 － 不可思议的 react diff

- React 通过制定大胆的 diff 策略，将 O(n3) 复杂度的问题转换成 O(n) 复杂度的问题；
- React 通过分层求异的策略，对 tree diff 进行算法优化；
- React 通过相同类生成相似树形结构，不同类生成不同树形结构的策略，对 component diff 进行算法优化；
- React 通过设置唯一 key 的策略，对 element diff 进行算法优化；

建议，在开发组件时，保持稳定的 DOM 结构会有助于性能的提升；

建议，在开发过程中，尽量减少类似将最后一个节点移动到列表首部的操作，当节点数量过大或更新操作过于频繁时，在一定程度上会影响 React 的渲染性能。

#### snabbdom 源码，是怎样实现精简的 Virtual DOM 的
待补充

### react 性能分析与优化

#### 减少不必要的渲染

在使用 class Component 进行开发的时候，我们可以使用 shouldComponentUpdate 来减少不必要的渲染，那么在使用 react hooks 后，我们如何实现这样的功能呢？

解决方案：React.memo和useMemo

对于这种情况，react 当然也给出了官方的解决方案，就是使用 React.memo 和 useMemo。

##### React.memo
React.momo 其实并不是一个 hook，它其实等价于 PureComponent，但是它只会对比 props。使用方式如下(用上面的例子):

  import React, { useState } from 'react'

  export const Count = React.memo(props => {
    const [data, setData] = useState({
      count: 0,
      name: 'cjg',
      age: 18
    })

    const handleClick = () => {
      const { count } = data
      setData({
        ...data,
        count: count + 1
      })
    }

    return <button onClick={handleClick}>count:{data.count}</button>
  })
##### useMemo

useMemo 它的用法其实跟 useEffects 有点像，我们直接看官方给的例子

  function Parent({ a, b }) {
    // Only re-rendered if `a` changes:
    const child1 = useMemo(() => <Child1 a={a} />, [a])
    // Only re-rendered if `b` changes:
    const child2 = useMemo(() => <Child2 b={b} />, [b])
    return (
      <>
        {child1}
        {child2}
      </>
    )
  }

从例子可以看出来，它的第二个参数和 useEffect 的第二个参数是一样的，只有在第二个参数数组的值发生变化时，才会触发子组件的更新。

### redux

Store：保存数据的地方，你可以把它看成一个容器，整个应用只能有一个 Store。

State：Store 对象包含所有数据，如果想得到某个时点的数据，就要对 Store 生成快照，这种时点的数据集合，就叫做 State。

Action：State 的变化，会导致 View 的变化。但是，用户接触不到 State，只能接触到 View。所以，State 的变化必须是 View 导致的。Action 就是 View 发出的通知，表示 State 应该要发生变化了。

Action Creator：View 要发送多少种消息，就会有多少种 Action。如果都手写，会很麻烦，所以我们定义一个函数来生成 Action，这个函数就叫 Action Creator。

Reducer：Store 收到 Action 以后，必须给出一个新的 State，这样 View 才会发生变化。这种 State 的计算过程就叫做 Reducer。Reducer 是一个函数，它接受 Action 和当前 State 作为参数，返回一个新的 State。

dispatch：是 View 发出 Action 的唯一方法。

然后我们过下整个工作流程：

首先，用户（通过 View）发出 Action，发出方式就用到了 dispatch 方法。

然后，Store 自动调用 Reducer，并且传入两个参数：当前 State 和收到的 Action，Reducer 会返回新的 State
State 一旦有变化，Store 就会调用监听函数，来更新 View。

到这儿为止，一次用户交互流程结束。可以看到，在整个流程中数据都是单向流动的，这种方式保证了流程的清晰。

作者：烟雨空灵
链接：https://juejin.im/post/5d75a881f265da03d211666c
来源：掘金
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
作者：烟雨空灵
链接：https://juejin.im/post/5d75a881f265da03d211666c
来源：掘金
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
作者：烟雨空灵
链接：https://juejin.im/post/5d75a881f265da03d211666c
来源：掘金
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
作者：烟雨空灵
链接：https://juejin.im/post/5d75a881f265da03d211666c
来源：掘金
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

作者：烟雨空灵
链接：https://juejin.im/post/5d75a881f265da03d211666c
来源：掘金
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。