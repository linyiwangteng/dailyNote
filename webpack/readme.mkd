## 模块化

> 将一个复杂的系统分解为多个模块以方便编码。

传统方式的问题（jquery方式）

1.命名空间冲突。
2.无法合理地管理项目的依赖和版本。
3、无法方便地控制依赖的加载顺序。
当项目变大时，这种方式将变得难以维护，需要用模块化的思想来组织代码。

### CommonJS

代码可复用于NodeJS环境下运行，例如同构应用。
通过NPM发布的很多第三方模块都是采用了CommonJS规范。

缺陷：代码无法直接在浏览器环境下运行，必须通过工具转换成标准的ES5.

### AMD

> 他采用了异步的方式加载依赖的模块，AMD规范主要用来解决针对浏览器的模块化问题，最具代表的是requirejs

优点：

  可以不转换代码的情况下直接在浏览器中运行；
  可以异步加载依赖；
  可并行加载多个依赖；
  代码可运行在浏览器环境和NodeJS环境下。

  确定是在于js运行环境没有原生支持AMD,需要先导入实现了AMD的库后才能正常使用。

  ### ES5模块化

    import {readFile} from 'fs';
    import React from 'react';

    export function func(){}
    export default {
      //...
    }

目前无法直接运行在大部分js运行环境下，必须通过工具转换成标准的ES5后才能正常运行。


### Webpack

Webpack是一个打包模块化js的工具，在webpack里一切文件皆模块，通过Loader转换文件，通过plugin注入钩子，最后输出由多个模块组合成的文件。webpack专注于构建模块项目。

webpack核心概念

1、Entry: 入口，Webpack执行构建的第一步将从Entry开始，可抽象成输入。
2、Module：模块，在webpack里一切皆模块，一个模块对应一个文件，webpack会从配置的Entry开始递归找出所有依赖的模块。
3、Chunk： 代码块，一个Chunk由多个模块组合而成，用于代码合并和分割。
4、Loader: 模块转换器，用于将模块的原内容按照需求转成新内容。
5、Plugin: 扩展插件，在webpack构建流程中的特定时机注入扩展逻辑，来改变构建结果或做我们想要的事情。
6、Output： 输出结果。